/**
 * @file
 * @param buf
 * @param wrap
 * @param xsize
 * @param ysize
 * @param filename
 *
 * Save gray frame
 *
 */


#include <stdio.h>
#include <string.h>
#include <libavformat/avformat.h>
#include <libavcodec/avcodec.h>
#include <libavutil/avutil.h>
#include "logging/log.h"

static void save_gray_frame(unsigned char *buf, int wrap, int xsize, int ysize, char *filename)
{
        FILE *f;
        int i;
	    char file[512];
	    strcpy(file, "./output/");
	    strcat(file, filename);
	    f = fopen(file,"w");

        fprintf(f, "P5\n%d %d\n%d\n", xsize, ysize, 255);

        for (i = 0; i < ysize; i++)
            fwrite(buf + i * wrap, 1, xsize, f);
        fclose(f);
}

static int decode_packet(AVPacket *pPacket, AVCodecContext *pCodecCtx, AVFrame *pFrame)
{
        int response = avcodec_send_packet(pCodecCtx, pPacket);

        if (response < 0)
        {
                log_error("Could not send packet to the decoder");
                return response;
        }


        while (response >= 0) {

                response = avcodec_receive_frame(pCodecCtx, pFrame);
                if (response == AVERROR(EAGAIN) || response == AVERROR_EOF) {
                        break;
                }
                else if (response < 0) {
                        //logging("ERROR - Could not receive frame from the decoder: %s", av_err2str(response));
                        return response;
                }

                if (response >= 0)
                {
                        log_info("Frame %d (type=%c, size=%d, format=%d) pts %d key_frame %d [DTS %d]",
                        pCodecCtx->frame_number,
                        pFrame->pkt_size,
                        pFrame->format,
                        pFrame->pts,
                        pFrame->key_frame,
                        pFrame->coded_picture_number);

                        char frame_filename[1024];
                        snprintf(frame_filename, sizeof(frame_filename), "%s-%d.pgm", "frame", pCodecCtx->frame_number);

                        if (pFrame->format != AV_PIX_FMT_YUV420P)
                        {
                                log_debug("The generated file may not be a grayscale image");
                        }

                        save_gray_frame(pFrame->data[0], pFrame->linesize[0], pFrame->width, pFrame->height, frame_filename);
                }
        }
	return 0;
}

int main(int argc, char *argv[]) 
{
	(void)argc;
	AVFormatContext *pFormatCtx = NULL;
	pFormatCtx = avformat_alloc_context();
	

	// Open and read media file
	if (avformat_open_input(&pFormatCtx, argv[1], NULL, NULL) != 0)
	{
		log_error("File not found, memory was not (or could not be) allocated.");
		return -1;
	}
	
	printf("Format %s duration %lld us\n", pFormatCtx->iformat->long_name, pFormatCtx->duration);
	
	if (avformat_find_stream_info(pFormatCtx, NULL) < 0)
	{
		log_error("Could not retrieve stream info");
		return -1;
	}

	
	// dumps codec information for audio and video
	av_dump_format(pFormatCtx, 0, argv[1], 0);



	AVCodec *pCodec = NULL;
	AVCodecParameters *pCodecParameters = NULL;
	int videoStreamIndex = -1;

	for (unsigned int i = 0; i < pFormatCtx->nb_streams; i++) 
	{
		AVCodecParameters *pLocalCodecParameters = NULL; 
		pLocalCodecParameters = pFormatCtx->streams[i]->codecpar;

		AVCodec *pLocalCodec = NULL;
		pLocalCodec = avcodec_find_decoder(pLocalCodecParameters->codec_id);
		
		if (pLocalCodec == NULL)
		{
			log_debug("Unsupported codec");
			continue;
		}

		// specific for video and audio
		if (pLocalCodecParameters->codec_type == AVMEDIA_TYPE_VIDEO) {
			
			if (videoStreamIndex == -1)
			{
				videoStreamIndex = i;
				log_info("videoStreamIndex %d", videoStreamIndex);
				pCodec = pLocalCodec;
				pCodecParameters = pLocalCodecParameters;
			}
			log_info("Video Codec: resolution %d x %d", pLocalCodecParameters->width, pLocalCodecParameters->height);
		} 
		else if (pLocalCodecParameters->codec_type == AVMEDIA_TYPE_AUDIO) {
			log_info("Audio Codec: %d channels, sample rate %d", pLocalCodecParameters->channels, pLocalCodecParameters->sample_rate);
		}

		log_info("\tCodec %s ID %d bit_rate %lld", pLocalCodec->long_name, pLocalCodec->id, pLocalCodecParameters->bit_rate);
		

		if (videoStreamIndex == -1)
		{
            log_error("File %s does not contain a video stream", argv[1]);
			return -1; 
		}

		AVCodecContext *pCodecCtx = avcodec_alloc_context3(pCodec);
		if (!pCodecCtx)
		{
            log_error("Failed to allocate memory for codec context");
			return -1;
		}

		if (avcodec_parameters_to_context(pCodecCtx, pCodecParameters) < 0)
		{
            log_error("Failed to copy codec params to codec context");
		}

		if (avcodec_open2(pCodecCtx, pCodec, NULL) < 0)
		{
            log_error("Failed to open codec through avcodec_open2");
			return -1;
		}

		
		AVPacket *pPacket = av_packet_alloc();
		if (!pPacket)
		{
            log_error("Failed to allocate memory for AVPacket");
			return -1;
		}

		AVFrame *pFrame = av_frame_alloc();
		if (!pFrame)
		{
            log_error("Failed to allocate memory for AVFrame");
			return -1;
		}

		int response = 0;
		int how_many_packets_to_process = 8;
		
		while (av_read_frame(pFormatCtx, pPacket) >= 0)
		{
			if (pPacket->stream_index == videoStreamIndex)
			{
				log_info("AVPacket->pts %" PRId64, pPacket->pts);
				response = decode_packet(pPacket, pCodecCtx, pFrame);
				if (response < 0)
					break;
				if (--how_many_packets_to_process <= 0)
					break;
			}

			av_packet_unref(pPacket);
		}

		log_info("Releasing all resources");

		avformat_close_input(&pFormatCtx);
		av_packet_free(&pPacket);
		av_frame_free(&pFrame);
		avcodec_free_context(&pCodecCtx);
		return 0;
	}
}


